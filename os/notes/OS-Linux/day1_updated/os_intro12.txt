1. operating system can seen as a set of system s/w components
   that manage h/w and logical resources in the system on 
   behalf of applications and users 

2. operating system also provides an environment in which developers
   can develop and build applications 

3. operating system also provides a controlled environment in which 
   applications can be loaded and executed 

4. operating system is made up of several components - it is a very 
   long list and each component is quite complex and may require
   a separate study of its own - one good example is memory subsystem 
   - another complex and vast sub-system is I/O 

5. most components interact with each other and do not exist as 
   stand alone components - understanding one component may depend
   on one or more other components - depth of study will differ
   depending upon our requirements 

6. all the components co-exit in a layered and hierarchical form, 
   in the system - although there is no strict layering or hierarchy, 
   there is a general model that is used for our study - one aspect 
   is layering and another aspect is modularity !!! what is 
   layering and what is modularity ???
    - core features can be added or removed as needed !!! drivers
      /I/o subsystems/filesystems(filesystem managers)/
      network protocols and many more !!! 

    - configuration and rebuilding of the core(restart system!!!)
    - adding/removing kernel modules to the core of the system !!!
      (no need to restart the system - run-time dynamic loading )

7. some of the layers interact very closely with the h/w controllers - 
   one such is HAL - hardware abstraction layer - I/O subsystem and
   device drivers are major contributors to interaction with h/w 
   controllers !!!
     - I/O subsystem manages drivers and devices(logically)
     - HAL is written in machine language
     - drivers are more in high-level language and specific 
       to a specific device controller 

8. study of certain components of OS may help a developer understand
   his build environment and execution environment - functional and 
   performance issues may be better understood, if OS architecture and
   components are understood !!!

9. one such component is memory manangement - another may be cpu scheduling
   - yet another may be process management - the list continues - 
   when certain services of operating system are needed directly or 
   indirectly, understanding the operating system behaviour may 
   help us use the services reasonably !!!

10. operating systems provide their services via system call APIs - these
    system call APIs are implemented using system library and system 
    call interface layer of the operating system !!! system call APIs
    are dependent on interrupt handling mechanism of the underlying 
    h/w and operating system as well !!!

11. for the above reason and also for understanding other activities
    of the operating system, interrupt mechanism and interrupt handling
    must be understood !!!

12. operating system may be seen as kernel , libraries and utilities, 
    in a computing system - kernel contains the core components of the
    operating system - typically, process mgmt., physical mm. mgmt., 
    virtual mem. mgmt., file management subsystems, logical file management
    subsystem, I/O subsystems , device drivers, interrupt subsystem,
    IPC subsystems, Timer subsystem and many more !!!

13. the following is the summary of the big picture in 
    linux_kernel_internals_concepts_intro.pdf !!!

    - system call interface layer provides a trap handler that is 
      invoked whenever a system call API is invoked - as per the 
      system call API and its rules, trap handler with the help
      of system call table (also located in system call interface layer)
      will invoke appropriate system call system routine in the 
      appropriate sub-system of the kernel - in the example shown,
      process management subsystem is in use !!!
 
    - in the same picture, process management subsystem is shown as 
      dependent on HAL layer - process management subsystem is 
      also supposed to contain cpu scheduler, in this picture - 
      in our discussions, cpu scheduler will be treated as a separate 
      subsystem - cpu scheduler also is dependent on HAL layer for 
      some of its activities - one such is process context switching !!!

    - the top most layer of memory management may be treated as 
      process memory manager/virtual memory manager !! lower layer 
      of memory management may be treated as physical memory manager!!!

    - top most layer of file management may be treated as logical 
      file manager - this is supposed to manage different file system 
      managers, which will inturn be responsible for managing different
      types of file systems !!!

    - block device management may be treated as an I/O subsystem and
      device drivers for various block devices are also managed via
      block device management !!!
 
    - block devices have certain rules for data transfer - they can 
      transfer data with the kernel in multiples of appropriate 
      block size - they cannot transfer arbitrarily sized data 

    - in the same picture, character/ byte devices are shown - character
      devices may transfer data in arbitrary sizes as per their requirements      - this is one of the major differences with respect to block devices-
      we will se more of this during file management !!!

    - this picture is not complete - there are many other subsystems and
      their own hierarchy and layering - still, this picture can be a 
      good starting point !!!

14. following is the summary for the class room big picture :

    - in the picture, there is a dotted line at the top separating 
      user-space and system-space !!!
    - user-space may be seen as a set of memory regions with a 
      set of attributes !!
    - system space may be seen as a set of memory regions with a 
      set of attributes !!
    - the attribute settings are taken care by the kernel, as per 
      rules of h/w and OS !!
    - attributes are managed by memory management subsystem - 
      it is accordingly set for user-space attributes or system space
      attributes !!
    - in addition, there is a separation between the 2 spaces and 
      their respective components via priviliges - user-space and 
      its components have lesser priviliges and system-space and 
      its components have higher priviliges - this privilige setting
      is controlled via a set of control bits in one of the processor's
      registers - again, this control is also done by kernel - we will
      see more of this during interrupt handling and system call 
      handling !!!
    - system-space components have the following priviliges:
         - can access any part of the memory of the system 
           as per rules of the system
         - can access any machine instruction of the underlying 
           architecture 
         - can access h/w controllers and registers as per rules
         
    - user-space components have the following restrictions:
         - can access only user-space regions of memory 
         - cannot access all machine instructions of the underlying
           architecture
         - cannot access h/w controllers and registers without 
           system calls and help of the kernel components !!    

15. interrupt management !!!
    - system-space manages interrupt table in the interrupt 
      subsystem !!
    - interrupt table is a highly architecture specific table - 
      it is managed by interrupt subsystem with the help of 
      HAL 
    - for each interrupt type/no., a particular entry is maintained
      in the interrupt table 
    - one interrupt handler is maintained by interrupt type/no. 
      in one entry of the interrupt table 
    - it is the responsibility of the kernel to setup a control 
      register of the processor to point to the system's interrupt 
      table - whenever a h/w interrupt signal of a particular 
      interrupt type/no. is generated, processor fetches the corresponding
      interrupt handler's address from the interrupt table known 
      to it !!!
    - let us assume an application is currently executing on the 
      processor and a timer h/w interrupt is generated by the 
      timer h/w controller !!
    - processor does the following , in response to interrupt 
      signal :
         - typically other h/w interrupts are blocked and
           not serviced when a particular h/w interrupt 
           is being serviced !!
         - it does a cpu mode switch and a stack switch - 
           cpu mode is switched from less priviliged to 
           more priviliged - stack is switched from user-space
           to system-space 
         - stack switching is done as per rules of the kernel 
           and help of h/w - certain register(s) may be modified !!
         - current execution context of the application is saved 
           in the system stack !!- cpu registers are saved - meaning,
           this is good enough to save the application's execution
           context !!
         - cpu executes a jump to the address of the corresponding 
           interrupt handler and starts execution of the interrupt 
           handler !!!
         - let us assume handler completes its job(??) and 
           executes a special machine instruction !!
         - this special machine instruction will reverse the 
           actions taken when an interrupt was generated - meaning,
           cpu mode is switched back to less priviliged mode, 
           registers(old execution context ) is restored - cpu 
           jumps back to an instruction in the application and 
           resumes execution of application normally 
         - this sequence of actions are repeated for every h/w 
           interrupt and several such interrupts may occur 
           in one second - these activities are seamless to 
           the user and developer of the system, but they 
           do productive work on behalf of device-drivers and
           applications !!

16.  system call APIs use interrupt mechanism to implement 
     their special jumps - system call APIs use a special machine
     instruction of the underlying architecture to implement 
     a special jump similar to h/w interrupts - in this case, 
     h/w signal is not generated by an external peripheral, but
     a special jump is generated by a machine instruction !!
      - most of the steps mentioned for h/w interrupt handler
        are also applicable for this mechanism
      - there are certain differences between the two mechanisms-
        one such is in the interrupt handling part 
      - in the case of system call APIs, the corresponding interrupt
        handler will pass control of execution to appropriate 
        system call system routine of appropriate subsystem - this 
        is done with the help of system call no. passed by 
        system call API and using system call table
          - each I/O interrupt has one interrupt handler in the
            interrupt table
          - all system call APIs end up accessing the same 
            system call interrupt handler - it is the responsibility
            of the system call interrupt handler to invoke appropriate
            system 
            call service routine 

 
      - in a modern day OS, there can be several system call APIs - 
        easily, 100s of APIs - each is assigned a fixed system call
        no. and encoded in its system call API
      - there is one entry for each system call API in the system 
        call table and it is indexed by the corresponding system 
        call no. - the corresponding entry contains pointer to 
        corresponding system call system routine !!
      - additional system call APIs and their code may 
        be added by a skilled developer, if needed !!! 

17. process management !!

    - why do we need a process ??

      - to launch an active applicatoin - to execute an active application ??
      - to utilize multiprogramming service of the operating system !!!
      - an active application is known as  a process !!
      - when an application is loaded in main memory, a process is 
        needed to manage the active application !!!
 
    - what is a process, pracatically ??

    - who is responsible for the creation of the first process ???
      - kernel is responsible for creating the initial set 
        of processes - particularly, init process is the first 
        user-space process created by the kernel without user's 
        intervention !!! although, the init process may be 
        customized by operating system developer !!!
      - first process is created by operating system after
        the os is loaded into main memory by boot-loader !!
      - what will happen, if os does not create the first process
        ??  no working environment will be available for user/
            developer in the system !!!
      - first process is responsible for creating further user-space
        processes, which are responsible for the working/interactive
        environment !!1

    - eventually, this first process will execute certain system 
      scripts and provide us an environment for building our 
      applications and loading our applications !!!  
    - once such an environment is created, any further processes are
      created directly or indirectly via system call APIs !!
    - before understanding process creation, termination and its 
      states, we must understand what is a process from system 
      point of view 
    - from a user/developer point of view, process is an active application 
      or a program !!!
       - an active application loaded in main memory, will 
         have following sections :
          - code
          - data(initialized / uninitialized )
          - heap 
          - stack
          - library sections
          - unallocated regions
          - addresses used are logical /virtual addresses 
          - it is the responsibiolity of the operating 
            system/process mgr./mem mgr to map logical/virtual 
            addresses to physical addresses !!! processor 
            and its MMU also plays a major role - all these 
            activities need management information stored as
            part of a process, in system space !!!
       - an inactive application will have the following sections :
          - code
          - initialized data 
          - certain headers 
               

18. following is the description of a process from a system point of 
    view :

     - each process in the system is allocated an unique process descr.
       (pd) - each pd contains information/details of a process and 
       also contains several nested objects , which in turn describe
       serveral resources and information 
     - pd typically contains following info :
         - process id 
         - process state 
         - scheduling parameters - policy, priority and time-slice 
                                   details
            - what is the importance of a process in the system 
            - what is the time-slice/time-share given to a process
              in the system 
            - what is the responsiveness of a process in the system 
            - decides allocation of cpu time and when cpu time is allocated !!
        

         - maintains system stack address - run-time context 
           is maintained for a process in system - stack - 
           can you name a process state when system stack is used ???
                     - blocked state //waiting state !!!
                    
                     - during system call jump/execution !!!



         - maintains address of active files of this process
         - maintains memory descriptor 
         - memory descriptor maintains other descriptors that 
           describe virtual memory and physical memory of 
           the process
         - all pds of all processes are always maintained 
           in a master list of the system - this is known 
           as pd master list 

         - in addition, a process may be in ready list or 
           may be in a wait queue(list) 
         - how is a process managed in a ready list ??
             - using pd object and its parameters

         - how is a process managed in a wait queue ???
             - using pd object and its parameters 

         - can a process be in a wait queue and a ready list at the 
           same time ???
             - No  
  
         - pd contains fields that help the system to maintain
           several lists of pds as per state information 
             - ready state - maintains all pds in ready state
               in a ready queue !!! one ready queue exists
               per processor !!!
             - different waitqueues exits for different 
               resources !!! one waitqueue may exist 
               per I/O data channel !!!

         - pd may contain credentials of a process - this 
           is typical in a multi-user environment - based on 
           the credentials, a process may have more privilige or
           less privilige(do not confuse this with processor 
                          privilige)
                - normal users may execute their applications
                  and utilities with lesser privilige due 
                  to lesser credentials
                - priviliged users may execute their applications
                  and utilities with higher privilige 
                - can you name the entities that may interpret 
                  these credentials ??? system call routines !!!

         - all pds of active applications/processes are maintained
           in a table or a list - if it is a table, it is known 
           as pd table - if it is a list , it is known as master 
           pd list - table is static in nature and list is more 
           dynamic in nature - lists are more popular in modern   
           systems

         - in addition to the pd list or table, system also 
           maintains a ready list/ready queue of pds - these 
           are pds whose state is ready - meaning, waiting 
           for scheduler to select the process for cpu assigment - 
           this assumes that other resources are available !!
       
         - in addition, system also maintains several waiting lists/
           waiting queues for h/w and logical resources - when a 
           specific request for a resource cannot be satisfied, 
           system adds the corresponding pd to corresponding 
           wait queue !!

         - each pd is assigned an unique id known as pid - most 
           process system calls and kernel space code use pid
           to identify a process / pd - we will be encountering 
           pid usage in many scenarios

         - state of a process is another important info. used 
           by the system in maintaining processes - typically
           following states are common:
                - Ready
                - Running 
                - blocked/waiting
                - stopped 
                - terminated 
             
         - the above are commonly used states - other states do 
           exist in real systems and they may be extensions of 
           common states - in a typical Linux system, following 
           states are in use :

                - Running
                - interruptible wait
                - uninterruptible wait
                - stopped
                - terminated 
                - dead  
        ????
         - when a process is running on the cpu(after scheduling), 
           it may request for resources - if the resource is available,
           process will be allocated the resource and it will 
           progress - if the resource is not available, kernel 
           changes the state of the process to one of the wait 
           states and also adds the process to the appropriate 
           wait queue !!!   
         - when the appropriate resource is available, kernel 
           will wake-up the process - state of the process will 
           be changed to ready state and pd will be removed from 
           wait queue - pd will be added to ready queue 
         - once in the ready queue, a process/pd will be scheduled 
           by the scheduler as per its merit 
         - when a process is scheduled and running on the processor, 
           it may be preeempted by the kernel, if it has exhausted 
           its time-slice/time-share - it may be preempted, if another
           process with higher priority is woken-up !!
         - when a process is preempted, its state will be changed to 
           ready and it will be added to ready queue, not wait queue !!
         - the above process life cycle continues - at any point of 
           time, there are several processes in the system - processes/pds
           are scattered in different states and corresponding 
           lists/queues 
         - pds and associated objects require physical memory an d
           this is allocated from phy. mem manager , not VMM - 
           VMM along with PMM will allocate physical memory for
           user-space sections of the process using virtual memory 
           techniques !!1
         - process creation may be defined as follows :
            - a new pd is created
            - a new pid is allocated
            - a program is associated with the pd 
            - other resources and objects are allocated and 
              added to the pd (???)
            - state of the process is changed to ready
            - pd is added to one or more lists of the process
              management in the system 
         - the above resources and objects of a pd are maintained 
           as long as the process is not terminated 
         - when a process is terminated normally or abnormally, 
           resources, objects and pd of the respective process
           are freed by the system 
         - there are specific system call APIs involved in process
           creation and process termination - different APIs may be
           involved depending upon certain conditions of creation 
           and termination !! 
         - a process is normally terminated when the corresponding 
           code/application executes the appropriate system call API,
           directly or indirectly !!!
         - how do we understand the behaviour of abnormal process
           termination ??
             - if a process does not respond or does not function
           as expected, it is normal for users/developers/administrators
           to forcibly terminate the process - such forcible termination 
           is done using a system call / system utility to notify /signal
           the respective process !!!
             - if a process attempts illegal activities(as mentioned 
           in class), processor generates an h/w exception - a 
           h/w exception will lead to interrupt behaviour and corresponding
           exception handler is invoked !!
             - exception handlers are maintained in interrupt table 
               along with interrupt handlers and system call trap 
               handler
             - when a specific exception handler is invoked, it is responsible             for notifying the respective process to terminate 
               abnormally !!!
            - scheduler is a component of the kernel responsible 
              for selecting a process to be executed on the processor
            - how is the scheduler scheduled ??
               -scheduler may be invoked when a process terminates
                normally or abnormally !!!
               - in the case of normal termination, it is invoked by 
                 the termination system call 
               - in the case of abnormal termination, it is invoked
                 by the exception handler !!
            - scheduler may also be invoked due to preemption - one
              such preemption is time-slice/time-share based scheduling
              and timer interrupt handler is responsible for invoking 
              the scheduler, when time-slice / time-share of a process
              has expired !!!      
            - a time-slice/time-share field is maintained in the pd - 
              this field is updated by the timer interrupt handler and
              when this value drops to 0, the current process is preempted
              - meaning, it is removed from the processor, context is
              saved and added to ready queue !! after this, it is the 
              responsibility of the timer interrupt handler to invoke 
              the scheduler !!! scheduler will pick the next eligible 
              process and assign the processor - these steps are known 
              as preemption of a process - a process is forcibily removed
              from the cpu and cpu is reassigned to another process !!!

















 
    











     
         
















 
                












 








































       
          



















 

























